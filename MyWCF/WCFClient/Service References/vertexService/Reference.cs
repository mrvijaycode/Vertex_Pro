//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.vertexService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="vertexService.IMyCalc")]
    public interface IMyCalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Add", ReplyAction="http://tempuri.org/IMyCalc/AddResponse")]
        int Add(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Add", ReplyAction="http://tempuri.org/IMyCalc/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Substract", ReplyAction="http://tempuri.org/IMyCalc/SubstractResponse")]
        int Substract(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Substract", ReplyAction="http://tempuri.org/IMyCalc/SubstractResponse")]
        System.Threading.Tasks.Task<int> SubstractAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Multiply", ReplyAction="http://tempuri.org/IMyCalc/MultiplyResponse")]
        int Multiply(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Multiply", ReplyAction="http://tempuri.org/IMyCalc/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Devide", ReplyAction="http://tempuri.org/IMyCalc/DevideResponse")]
        int Devide(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyCalc/Devide", ReplyAction="http://tempuri.org/IMyCalc/DevideResponse")]
        System.Threading.Tasks.Task<int> DevideAsync(int n1, int n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyCalcChannel : WCFClient.vertexService.IMyCalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyCalcClient : System.ServiceModel.ClientBase<WCFClient.vertexService.IMyCalc>, WCFClient.vertexService.IMyCalc {
        
        public MyCalcClient() {
        }
        
        public MyCalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyCalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyCalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyCalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int n1, int n2) {
            return base.Channel.Add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int n1, int n2) {
            return base.Channel.AddAsync(n1, n2);
        }
        
        public int Substract(int n1, int n2) {
            return base.Channel.Substract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> SubstractAsync(int n1, int n2) {
            return base.Channel.SubstractAsync(n1, n2);
        }
        
        public int Multiply(int n1, int n2) {
            return base.Channel.Multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int n1, int n2) {
            return base.Channel.MultiplyAsync(n1, n2);
        }
        
        public int Devide(int n1, int n2) {
            return base.Channel.Devide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> DevideAsync(int n1, int n2) {
            return base.Channel.DevideAsync(n1, n2);
        }
    }
}
